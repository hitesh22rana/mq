// proto/mq.proto

syntax = "proto3";

package mq;

option go_package = "github.com/hitesh22rana/mq/pkg/proto/mq;mq";

// Message represents a message sent to consumers
message Message {
    string id         = 1;  // Unique identifier for the message
    bytes content     = 2;  // The message content
    int64 created_at  = 3;  // The timestamp of the message
}

// Subscriber represents a subscriber to a channel
message Subscriber {
    string id = 1; // Unique identifier for the subscriber
    string ip = 2; // IP address of the subscriber
}

// Offset represents the offset of a message in a channel
enum Offset {
    OFFSET_UNKNOWN   = 0;  // Invalid offset
    OFFSET_BEGINNING = 1;  // Start consuming messages from the beginning
    OFFSET_LATEST    = 2;  // Start consuming messages from the latest
}

// WalEntry represents an entry in the write-ahead log
message WalEntry {
    string channel  = 1; // The channel the message was published to
    Message message = 2; // The message
}


// CreateChannelRequest is sent to create a new channel
message CreateChannelRequest {
    string channel = 1; // The channel to create
}

// CreateChannelResponse is the mq's response to a CreateChannelRequest
message CreateChannelResponse {}

// PublishRequest is sent by publishers to publish messages
message PublishRequest {
    string channel  = 1;  // The channel to publish to
    bytes content   = 2;  // The message content
}

// PublishResponse is the mq's response to a PublishRequest
message PublishResponse {}

// SubscribeRequest is sent by subscribers to subscribe to a channel
message SubscribeRequest {
    string channel       = 1; // The channel to subscribe to
    Offset offset        = 2; // The offset to start consuming messages from
    uint64 pull_interval = 3; // PullInterval is the interval at which the consumer will pull data from mq (default is 100 ms)
}

// MQService is the mq's service definition
service MQService {
    // CreateChannel creates a new channel
    rpc CreateChannel(CreateChannelRequest) returns (CreateChannelResponse) {}

    // Publisher publishes a message to a channel
    rpc Publish(PublishRequest) returns (PublishResponse) {}

    // Consumer subscribes to a channel and receives a stream of messages
    rpc Subscribe(SubscribeRequest) returns (stream Message) {}
}